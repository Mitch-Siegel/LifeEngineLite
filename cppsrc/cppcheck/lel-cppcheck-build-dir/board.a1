<?xml version="1.0"?>
<analyzerinfo hash="7873503850089115565">
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Cell_Leaf&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Cell_Leaf&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="../board.cpp">
            <location file="../lifeforms.h" line="210" column="2"/>
            <symbol>Cell_Leaf</symbol>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &apos;Cell_Flower&apos; has a constructor with 1 argument that is not explicit." verbose="Class &apos;Cell_Flower&apos; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="../board.cpp">
            <location file="../lifeforms.h" line="251" column="2"/>
            <symbol>Cell_Flower</symbol>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (thisLeaf-&gt;myFlower!=nullptr) thisLeaf-&gt;myFlower=nullptr&apos; is logically equivalent to &apos;thisLeaf-&gt;myFlower=nullptr&apos;." verbose="The statement &apos;if (thisLeaf-&gt;myFlower!=nullptr) thisLeaf-&gt;myFlower=nullptr&apos; is logically equivalent to &apos;thisLeaf-&gt;myFlower=nullptr&apos;." cwe="398" file0="../board.cpp">
            <location file="../board.cpp" line="328" column="26" info="Condition &apos;thisLeaf-&gt;myFlower!=nullptr&apos; is redundant"/>
            <location file="../board.cpp" line="330" column="23" info="Assignment &apos;thisLeaf-&gt;myFlower=nullptr&apos;"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &apos;if (thisFlower-&gt;myLeaf!=nullptr) thisFlower-&gt;myLeaf=nullptr&apos; is logically equivalent to &apos;thisFlower-&gt;myLeaf=nullptr&apos;." verbose="The statement &apos;if (thisFlower-&gt;myLeaf!=nullptr) thisFlower-&gt;myLeaf=nullptr&apos; is logically equivalent to &apos;thisFlower-&gt;myLeaf=nullptr&apos;." cwe="398" file0="../board.cpp">
            <location file="../board.cpp" line="338" column="26" info="Condition &apos;thisFlower-&gt;myLeaf!=nullptr&apos; is redundant"/>
            <location file="../board.cpp" line="340" column="23" info="Assignment &apos;thisFlower-&gt;myLeaf=nullptr&apos;"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in format string (no. 1) requires &apos;unsigned long&apos; but the argument type is &apos;std::size_t {aka unsigned long}&apos;." verbose="%lu in format string (no. 1) requires &apos;unsigned long&apos; but the argument type is &apos;std::size_t {aka unsigned long}&apos;." cwe="686" file0="../board.cpp">
            <location file="../board.cpp" line="189" column="2"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in format string (no. 3) requires &apos;unsigned long&apos; but the argument type is &apos;std::size_t {aka unsigned long}&apos;." verbose="%lu in format string (no. 3) requires &apos;unsigned long&apos; but the argument type is &apos;std::size_t {aka unsigned long}&apos;." cwe="686" file0="../board.cpp">
            <location file="../board.cpp" line="189" column="2"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in format string (no. 1) requires &apos;unsigned long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." verbose="%lu in format string (no. 1) requires &apos;unsigned long&apos; but the argument type is &apos;size_t {aka unsigned long}&apos;." cwe="686" file0="../board.cpp">
            <location file="../board.cpp" line="272" column="2"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp">
            <location file="../board.cpp" line="54" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp">
            <location file="../board.cpp" line="62" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp">
            <location file="../board.cpp" line="70" column="9"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp">
            <location file="../board.cpp" line="78" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp">
            <location file="../board.cpp" line="102" column="33"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp">
            <location file="../board.cpp" line="327" column="25"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp">
            <location file="../board.cpp" line="337" column="29"/>
        </error>
  <FileInfo check="ctu">
<function-call call-id="../rng.h:5:5" call-funcname="randInt" call-argnr="1" file="../board.cpp" line="83" col="29" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="../rng.h:5:5" call-funcname="randInt" call-argnr="1" file="../board.cpp" line="114" col="75" call-argexpr="0" call-argvaluetype="0" call-argvalue="0"/><function-call call-id="../rng.h:5:5" call-funcname="randInt" call-argnr="2" file="../board.cpp" line="114" col="75" call-argexpr="newReproductioncooldown" call-argvaluetype="0" call-argvalue="0">
  <path file="../board.cpp" line="113" col="94" info="Assignment &apos;newReproductioncooldown=(grownFruit-&gt;GetMaxEnergy()/4)*0&apos;, assigned value is 0"/>
</function-call>  </FileInfo>
  <FileInfo check="Class">
<class name="Board" file="../board.h" line="10" col="1" hash="13165210559204127586"/>
  </FileInfo>
  <FileInfo check="Null pointer">
    <unsafe-usage my-id="../board.h:34:10" my-argnr="3" my-argname="_cell" file="../board.cpp" line="350" col="2" value="0"/>
    <unsafe-usage my-id="../board.h:36:10" my-argnr="1" my-argname="_replaced" file="../board.cpp" line="369" col="22" value="0"/>
    <unsafe-usage my-id="../board.h:38:10" my-argnr="3" my-argname="a" file="../board.cpp" line="381" col="15" value="0"/>
  </FileInfo>
  <FileInfo check="Uninitialized variables">
    <unsafe-usage my-id="../board.h:36:10" my-argnr="1" my-argname="_replaced" file="../board.cpp" line="369" col="22" value="0"/>
    <unsafe-usage my-id="../board.h:38:10" my-argnr="3" my-argname="a" file="../board.cpp" line="381" col="15" value="0"/>
  </FileInfo>
  <FileInfo check="CheckUnusedFunctions">
    <functiondecl functionName="Tick" lineNumber="45"/>
    <functiondecl functionName="Stats" lineNumber="162"/>
    <functiondecl functionName="boundCheckPos" lineNumber="286"/>
    <functiondecl functionName="isCellOfType" lineNumber="296"/>
    <functiondecl functionName="replaceCellAt" lineNumber="308"/>
    <functiondecl functionName="replaceCell" lineNumber="367"/>
    <functiondecl functionName="swapCellAtIndex" lineNumber="372"/>
    <functiondecl functionName="createOrganism" lineNumber="394"/>
    <functioncall functionName="AddCell"/>
    <functioncall functionName="AddEnergy"/>
    <functioncall functionName="Board"/>
    <functioncall functionName="Cell"/>
    <functioncall functionName="Cell_Armor"/>
    <functioncall functionName="Cell_Bark"/>
    <functioncall functionName="Cell_Biomass"/>
    <functioncall functionName="Cell_Carnivore"/>
    <functioncall functionName="Cell_Empty"/>
    <functioncall functionName="Cell_Flower"/>
    <functioncall functionName="Cell_Fruit"/>
    <functioncall functionName="Cell_Herbivore"/>
    <functioncall functionName="Cell_Killer"/>
    <functioncall functionName="Cell_Leaf"/>
    <functioncall functionName="Cell_Mover"/>
    <functioncall functionName="Cell_Plantmass"/>
    <functioncall functionName="Cell_Touch"/>
    <functioncall functionName="CheckValidity"/>
    <functioncall functionName="GenerateRandomCell"/>
    <functioncall functionName="GetEnergy"/>
    <functioncall functionName="GetMaxEnergy"/>
    <functioncall functionName="GetMaxHealth"/>
    <functioncall functionName="Heal"/>
    <functioncall functionName="Organism"/>
    <functioncall functionName="Organisms"/>
    <functioncall functionName="RecalculateStats"/>
    <functioncall functionName="Remove"/>
    <functioncall functionName="Tick"/>
    <functioncall functionName="_cell"/>
    <functioncall functionName="_dim_x"/>
    <functioncall functionName="_dim_y"/>
    <functioncall functionName="_newCell"/>
    <functioncall functionName="_x"/>
    <functioncall functionName="_y"/>
    <functioncall functionName="a"/>
    <functioncall functionName="a_oldx"/>
    <functioncall functionName="a_oldy"/>
    <functioncall functionName="alive"/>
    <functioncall functionName="b"/>
    <functioncall functionName="begin"/>
    <functioncall functionName="bool"/>
    <functioncall functionName="boundCheckPos"/>
    <functioncall functionName="break"/>
    <functioncall functionName="cell_armor"/>
    <functioncall functionName="cell_bark"/>
    <functioncall functionName="cell_biomass"/>
    <functioncall functionName="cell_carnivore_mouth"/>
    <functioncall functionName="cell_empty"/>
    <functioncall functionName="cell_flower"/>
    <functioncall functionName="cell_fruit"/>
    <functioncall functionName="cell_herbivore_mouth"/>
    <functioncall functionName="cell_killer"/>
    <functioncall functionName="cell_leaf"/>
    <functioncall functionName="cell_mover"/>
    <functioncall functionName="cell_null"/>
    <functioncall functionName="cell_plantmass"/>
    <functioncall functionName="cell_touch"/>
    <functioncall functionName="couldAddSecond"/>
    <functioncall functionName="count"/>
    <functioncall functionName="count_cells"/>
    <functioncall functionName="count_energy"/>
    <functioncall functionName="count_lifespan"/>
    <functioncall functionName="count_maxconviction"/>
    <functioncall functionName="count_maxenergy"/>
    <functioncall functionName="count_mutability"/>
    <functioncall functionName="count_null"/>
    <functioncall functionName="count_raw"/>
    <functioncall functionName="count_rotatevschange"/>
    <functioncall functionName="count_turnwhenrotate"/>
    <functioncall functionName="default"/>
    <functioncall functionName="diff"/>
    <functioncall functionName="dim_x"/>
    <functioncall functionName="dim_y"/>
    <functioncall functionName="dirIndex"/>
    <functioncall functionName="duration_cast"/>
    <functioncall functionName="end"/>
    <functioncall functionName="erase"/>
    <functioncall functionName="exit"/>
    <functioncall functionName="false"/>
    <functioncall functionName="find"/>
    <functioncall functionName="float"/>
    <functioncall functionName="for"/>
    <functioncall functionName="grownFruit"/>
    <functioncall functionName="i"/>
    <functioncall functionName="if"/>
    <functioncall functionName="intent_changeDir"/>
    <functioncall functionName="intent_continue"/>
    <functioncall functionName="intent_rotateClockwise"/>
    <functioncall functionName="intent_rotateCounterClockwise"/>
    <functioncall functionName="isCellOfType"/>
    <functioncall functionName="lastFrame"/>
    <functioncall functionName="lifespan"/>
    <functioncall functionName="maxConviction"/>
    <functioncall functionName="microseconds"/>
    <functioncall functionName="millis"/>
    <functioncall functionName="mutability"/>
    <functioncall functionName="newOrganism"/>
    <functioncall functionName="newReproductioncooldown"/>
    <functioncall functionName="now"/>
    <functioncall functionName="nullptr"/>
    <functioncall functionName="override"/>
    <functioncall functionName="parentMutability"/>
    <functioncall functionName="printf"/>
    <functioncall functionName="push_back"/>
    <functioncall functionName="randInt"/>
    <functioncall functionName="randPercent"/>
    <functioncall functionName="replaceCell"/>
    <functioncall functionName="replaceCellAt"/>
    <functioncall functionName="replicated"/>
    <functioncall functionName="rotatevschange"/>
    <functioncall functionName="secondRandomCell"/>
    <functioncall functionName="size"/>
    <functioncall functionName="switch"/>
    <functioncall functionName="tickCount"/>
    <functioncall functionName="touchSensorHaverCount"/>
    <functioncall functionName="true"/>
    <functioncall functionName="turnwhenrotate"/>
    <functioncall functionName="type"/>
    <functioncall functionName="vector"/>
    <functioncall functionName="x"/>
    <functioncall functionName="y"/>
  </FileInfo>
</analyzerinfo>
