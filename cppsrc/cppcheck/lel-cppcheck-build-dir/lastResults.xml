<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.9"/>
    <errors>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Cell_Leaf&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Cell_Leaf&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../lifeforms.h" line="210"/>
        </error>
        <error id="noExplicitConstructor" severity="style" msg="Class &amp;#039;Cell_Flower&amp;#039; has a constructor with 1 argument that is not explicit." verbose="Class &amp;#039;Cell_Flower&amp;#039; has a constructor with 1 argument that is not explicit. Such constructors should in general be explicit for type safety reasons. Using the explicit keyword in the constructor means some mistakes when using the class can be avoided." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../lifeforms.h" line="251"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &amp;#039;Cell_Plantmass&amp;#039; is called from constructor &amp;#039;Cell_Plantmass(int _ticksUntilSpoil)&amp;#039; at line 101. Dynamic binding is not used." verbose="Virtual function &amp;#039;Cell_Plantmass&amp;#039; is called from constructor &amp;#039;Cell_Plantmass(int _ticksUntilSpoil)&amp;#039; at line 101. Dynamic binding is not used." file0="../cell.cpp" sinceDate="M/d/yy">
            <location file="../lifeforms.h" line="168" info="Cell_Plantmass is a virtual function"/>
            <location file="../cell.cpp" line="101" info="Calling Cell_Plantmass"/>
        </error>
        <error id="virtualCallInConstructor" severity="style" msg="Virtual function &amp;#039;Cell_Biomass&amp;#039; is called from constructor &amp;#039;Cell_Biomass(int _ticksUntilSpoil)&amp;#039; at line 132. Dynamic binding is not used." verbose="Virtual function &amp;#039;Cell_Biomass&amp;#039; is called from constructor &amp;#039;Cell_Biomass(int _ticksUntilSpoil)&amp;#039; at line 132. Dynamic binding is not used." file0="../cell.cpp" sinceDate="M/d/yy">
            <location file="../lifeforms.h" line="185" info="Cell_Biomass is a virtual function"/>
            <location file="../cell.cpp" line="132" info="Calling Cell_Biomass"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &amp;#039;if (thisLeaf-&amp;gt;myFlower!=nullptr) thisLeaf-&amp;gt;myFlower=nullptr&amp;#039; is logically equivalent to &amp;#039;thisLeaf-&amp;gt;myFlower=nullptr&amp;#039;." verbose="The statement &amp;#039;if (thisLeaf-&amp;gt;myFlower!=nullptr) thisLeaf-&amp;gt;myFlower=nullptr&amp;#039; is logically equivalent to &amp;#039;thisLeaf-&amp;gt;myFlower=nullptr&amp;#039;." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="328" info="Condition &amp;#039;thisLeaf-&amp;gt;myFlower!=nullptr&amp;#039; is redundant"/>
            <location file="../board.cpp" line="330" info="Assignment &amp;#039;thisLeaf-&amp;gt;myFlower=nullptr&amp;#039;"/>
        </error>
        <error id="duplicateConditionalAssign" severity="style" msg="The statement &amp;#039;if (thisFlower-&amp;gt;myLeaf!=nullptr) thisFlower-&amp;gt;myLeaf=nullptr&amp;#039; is logically equivalent to &amp;#039;thisFlower-&amp;gt;myLeaf=nullptr&amp;#039;." verbose="The statement &amp;#039;if (thisFlower-&amp;gt;myLeaf!=nullptr) thisFlower-&amp;gt;myLeaf=nullptr&amp;#039; is logically equivalent to &amp;#039;thisFlower-&amp;gt;myLeaf=nullptr&amp;#039;." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="338" info="Condition &amp;#039;thisFlower-&amp;gt;myLeaf!=nullptr&amp;#039; is redundant"/>
            <location file="../board.cpp" line="340" info="Assignment &amp;#039;thisFlower-&amp;gt;myLeaf=nullptr&amp;#039;"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;std::size_t {aka unsigned long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;std::size_t {aka unsigned long}&amp;#039;." cwe="686" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="189"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in format string (no. 3) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;std::size_t {aka unsigned long}&amp;#039;." verbose="%lu in format string (no. 3) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;std::size_t {aka unsigned long}&amp;#039;." cwe="686" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="189"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." cwe="686" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="272"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="54"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="62"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="70"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="78"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="102"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="327"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../board.cpp" sinceDate="M/d/yy">
            <location file="../board.cpp" line="337"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;swapCellAtIndex&amp;#039; is never used." verbose="The function &amp;#039;swapCellAtIndex&amp;#039; is never used." cwe="561" sinceDate="M/d/yy">
            <location file="../board.cpp" line="372"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Brain::justRewarded&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Brain::justRewarded&amp;#039; is not initialized in the constructor." cwe="398" file0="../brain.cpp" sinceDate="M/d/yy">
            <location file="../brain.cpp" line="4"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;ForceRechoose&amp;#039; is never used." verbose="The function &amp;#039;ForceRechoose&amp;#039; is never used." cwe="561" sinceDate="M/d/yy">
            <location file="../brain.cpp" line="40"/>
        </error>
        <error id="uninitMemberVar" severity="warning" msg="Member variable &amp;#039;Cell_Carnivore::direction&amp;#039; is not initialized in the constructor." verbose="Member variable &amp;#039;Cell_Carnivore::direction&amp;#039; is not initialized in the constructor." cwe="398" file0="../cell.cpp" sinceDate="M/d/yy">
            <location file="../cell.cpp" line="556"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!valid&amp;#039; is always true" verbose="Condition &amp;#039;!valid&amp;#039; is always true" cwe="571" file0="../cell.cpp" sinceDate="M/d/yy">
            <location file="../cell.cpp" line="597" info="Condition &amp;#039;!valid&amp;#039; is always true"/>
            <location file="../cell.cpp" line="583" info="Assuming condition is false"/>
            <location file="../cell.cpp" line="572" info="Assignment &amp;#039;valid=false&amp;#039;, assigned value is 0"/>
        </error>
        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398" file0="../cell.cpp" sinceDate="M/d/yy">
            <location file="../cell.cpp" line="513"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." cwe="686" file0="../main.cpp" sinceDate="M/d/yy">
            <location file="../main.cpp" line="244"/>
        </error>
        <error id="invalidPrintfArgType_uint" severity="portability" msg="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." verbose="%lu in format string (no. 1) requires &amp;#039;unsigned long&amp;#039; but the argument type is &amp;#039;size_t {aka unsigned long}&amp;#039;." cwe="686" file0="../main.cpp" sinceDate="M/d/yy">
            <location file="../main.cpp" line="268"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &amp;#039;!boundCheckResult&amp;#039; is always true" verbose="Condition &amp;#039;!boundCheckResult&amp;#039; is always true" cwe="571" file0="../organism.cpp" sinceDate="M/d/yy">
            <location file="../organism.cpp" line="445" info="Condition &amp;#039;!boundCheckResult&amp;#039; is always true"/>
            <location file="../organism.cpp" line="444" info="Assuming that condition &amp;#039;boundCheckResult&amp;#039; is not redundant"/>
        </error>
        <error id="useStlAlgorithm" severity="style" msg="Consider using std::any_of algorithm instead of a raw loop." verbose="Consider using std::any_of algorithm instead of a raw loop." cwe="398" file0="../organism.cpp" sinceDate="M/d/yy">
            <location file="../organism.cpp" line="200"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;looking&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;looking&amp;#039; is assigned a value that is never used." cwe="563" file0="../organism.cpp" sinceDate="M/d/yy">
            <location file="../organism.cpp" line="624"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &amp;#039;looking&amp;#039; is assigned a value that is never used." verbose="Variable &amp;#039;looking&amp;#039; is assigned a value that is never used." cwe="563" file0="../organism.cpp" sinceDate="M/d/yy">
            <location file="../organism.cpp" line="630"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &amp;#039;randFloat&amp;#039; is never used." verbose="The function &amp;#039;randFloat&amp;#039; is never used." cwe="561" sinceDate="M/d/yy">
            <location file="../rng.cpp" line="8"/>
        </error>
    </errors>
</results>
